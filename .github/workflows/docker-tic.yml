## tic GitHub Actions template: linux-macos-windows-deploy
## revision date: 2020-06-14
on:
  push:
  #pull_request:
  # for now, CRON jobs only run on the default branch of the repo (i.e. usually on master)
  #schedule:
    # * is a special character in YAML so you have to quote this string
    #- cron: "0 4 * * *"

name: tic-docker

jobs:
  docker:
    runs-on: ubuntu-latest # linux required if you want to use docker
    steps:
    - uses: actions/checkout@v2
    - uses: docker://pats22/tic:3.6.3

    - uses: r-lib/actions/setup-pandoc@master

    # for some strange Windows reason this step and the next one need to be decoupled
    - name: "[Stage] Prepare"
      run: |
        R -q -e "if (!requireNamespace('remotes')) install.packages('remotes', type = 'source')"
        R -q -e "if (getRversion() < '3.2' && !requireNamespace('curl')) install.packages('curl', type = 'source')"

    - name: "[Stage] [Linux] Install curl"
      if: runner.os == 'Linux'
      run: sudo apt install libcurl4-openssl-dev

    - name: "[Stage] Install"
      if: matrix.config.os != 'macOS-latest' || matrix.config.r != 'devel'
      run: R -q -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

    # macOS devel needs its own stage because we need to work with an option to suppress the usage of binaries
    - name: "[Stage] Prepare & Install (macOS-devel)"
      if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'devel'
      run: |
        echo -e 'options(Ncpus = 4, pkgType = "source", repos = structure(c(CRAN = "https://cloud.r-project.org/")))' > $HOME/.Rprofile
        R -q -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

    - name: "[Stage] Script"
      run: R -q -e 'tic::script()'

    - name: "[Stage] After Success"
      if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'release'
      run: R -q -e "tic::after_success()"

    - name: "[Stage] Upload R CMD check artifacts"
      if: failure()
      uses: actions/upload-artifact@master
      with:
        name: ${{ runner.os }}-r${{ matrix.config.r }}-results
        path: check
    - name: "[Stage] Before Deploy"
      run: |
        R -q -e "tic::before_deploy()"

    - name: "[Stage] Deploy"
      run: R -q -e "tic::deploy()"

    - name: "[Stage] After Deploy"
      run: R -q -e "tic::after_deploy()"
